/**
 * \file data_dictionary.h
 * \brief This file encloses all the types getters and setters
 *        that are global to the application.
 * \details Generated by 'generate_data_dictionary.py'
 * \author Lucas Pinard
 */
#ifndef DATA_DICTIONARY_H
#define DATA_DICTIONARY_H

#include <stdbool.h>
#include <stdint.h>

/**
 * \brief Command received on input, can be either ON (true) or OFF (false).
 */
typedef bool command_in_t;

/**
 * \brief Command sent on output, can be either ON (true) or OFF (false).
 */
typedef bool command_out_t;

/**
 * \brief 8-bit CRC code.
 */
typedef uint8_t crc_8_t;

/**
 * \brief ID of a MUX frame.
 */
typedef uint8_t mux_id_t;

/**
 * \brief Mileage of the vehicle, in kilometers.
 */
typedef uint32_t frame_mileage_t;

/**
 * \brief Current speed of the vehicle, in kilometers per hour.
 */
typedef uint8_t frame_speed_t;

/**
 * \brief Flags for the frame defects : tire pressure on bit 0b01, brakes
 * failure on bit 0b10.
 */
typedef uint8_t frame_flags_t;

/**
 * \brief Flags for the motor defects : motor pressure on bit 0b001, cooling
 * liquid overheat on bit 0b010, oil overheat on bit 0b100.
 */
typedef uint8_t motor_flags_t;

/**
 * \brief Amount of remaining fuel in the tank.
 */
typedef uint8_t tank_level_t;

/**
 * \brief Current motor speed, in rotations per minute.
 */
typedef uint32_t motor_speed_t;

/**
 * \brief Flags for the battery defects: battery low on bit 0b01, battery
 * failure on bit 0b10.
 */
typedef uint8_t battery_flags_t;

/**
 * \brief ID of the response message sent to the light management unit.
 */
typedef uint8_t message_id_t;

/**
 * \brief Finite state machine for the lights systems.
 */
typedef int32_t fsm_lights_t;

/**
 * \brief Finite state machine for the blinkers systems.
 */
typedef enum {
  FSM_BLINKERS_OFF = 0,
  FSM_BLINKERS_ACTIVE_ON = 1,
  FSM_BLINKERS_ACTIVE_OFF = 2,
  FSM_BLINKERS_ACTIVE_ON_ACQUITTED = 3,
  FSM_BLINKERS_ACTIVE_OFF_ACQUITTED = 4,
  FSM_BLINKERS_ERROR = -1
} fsm_blinkers_t;

/**
 * \brief Finite state machine for the wipers system.
 */
typedef enum {
  FSM_WIPERS_OFF = 0,
  FSM_WIPERS_ON = 1,
  FSM_WIPERS_WASH = 2,
  FSM_WIPERS_WAIT = 3
} fsm_wipers_t;

/**
 * \brief Timer for the finite state machines.
 */
typedef uint8_t fsm_timer_t;

/**
 * \brief Acknowledgement of a message sent.
 */
typedef bool acknowledgement_t;

/**
 * \brief Getter for application.warnings_in
 * \return command_in_t: Input buffer for the warnings command.
 */
command_in_t get_warnings_in();

/**
 * \brief Setter for application.warnings_in
 * \param command_in_t: Input buffer for the warnings command.
 */
void set_warnings_in(command_in_t);

/**
 * \brief Getter for application.warnings_out
 * \return command_out_t: Output buffer for the warnings command.
 */
command_out_t get_warnings_out();

/**
 * \brief Setter for application.warnings_out
 * \param command_out_t: Output buffer for the warnings command.
 */
void set_warnings_out(command_out_t);

/**
 * \brief Getter for application.sidelights_in
 * \return command_in_t: Input buffer for the sidelights command.
 */
command_in_t get_sidelights_in();

/**
 * \brief Setter for application.sidelights_in
 * \param command_in_t: Input buffer for the sidelights command.
 */
void set_sidelights_in(command_in_t);

/**
 * \brief Getter for application.sidelights_out
 * \return command_out_t: Output buffer for the sidelights command.
 */
command_out_t get_sidelights_out();

/**
 * \brief Setter for application.sidelights_out
 * \param command_out_t: Output buffer for the sidelights command.
 */
void set_sidelights_out(command_out_t);

/**
 * \brief Getter for application.sidelights_acknowledgement
 * \return acknowledgement_t: Acknowledgement for the sidelights command
 * message.
 */
acknowledgement_t get_sidelights_acknowledgement();

/**
 * \brief Setter for application.sidelights_acknowledgement
 * \param acknowledgement_t: Acknowledgement for the sidelights command message.
 */
void set_sidelights_acknowledgement(acknowledgement_t);

/**
 * \brief Getter for application.headlights_in
 * \return command_in_t: Input buffer for the headlights command.
 */
command_in_t get_headlights_in();

/**
 * \brief Setter for application.headlights_in
 * \param command_in_t: Input buffer for the headlights command.
 */
void set_headlights_in(command_in_t);

/**
 * \brief Getter for application.headlights_out
 * \return command_out_t: Output buffer for the headlight command.
 */
command_out_t get_headlights_out();

/**
 * \brief Setter for application.headlights_out
 * \param command_out_t: Output buffer for the headlight command.
 */
void set_headlights_out(command_out_t);

/**
 * \brief Getter for application.headlights_acknowledgement
 * \return acknowledgement_t: Acknowledgement for the headlights command
 * message.
 */
acknowledgement_t get_headlights_acknowledgement();

/**
 * \brief Setter for application.headlights_acknowledgement
 * \param acknowledgement_t: Acknowledgement for the headlights command message.
 */
void set_headlights_acknowledgement(acknowledgement_t);

/**
 * \brief Getter for application.redlights_in
 * \return command_in_t: Input buffer for the redlights command.
 */
command_in_t get_redlights_in();

/**
 * \brief Setter for application.redlights_in
 * \param command_in_t: Input buffer for the redlights command.
 */
void set_redlights_in(command_in_t);

/**
 * \brief Getter for application.redlights_out
 * \return command_out_t: Output buffer for the redlights command.
 */
command_out_t get_redlights_out();

/**
 * \brief Setter for application.redlights_out
 * \param command_out_t: Output buffer for the redlights command.
 */
void set_redlights_out(command_out_t);

/**
 * \brief Getter for application.redlights_acknowledgement
 * \return acknowledgement_t: Acknowledgement for the redlights command message.
 */
acknowledgement_t get_redlights_acknowledgement();

/**
 * \brief Setter for application.redlights_acknowledgement
 * \param acknowledgement_t: Acknowledgement for the redlights command message.
 */
void set_redlights_acknowledgement(acknowledgement_t);

/**
 * \brief Getter for application.left_blinker_in
 * \return command_in_t: Input buffer for the left blinker command.
 */
command_in_t get_left_blinker_in();

/**
 * \brief Setter for application.left_blinker_in
 * \param command_in_t: Input buffer for the left blinker command.
 */
void set_left_blinker_in(command_in_t);

/**
 * \brief Getter for application.left_blinker_out
 * \return command_out_t: Output buffer for the left blinker command.
 */
command_out_t get_left_blinker_out();

/**
 * \brief Setter for application.left_blinker_out
 * \param command_out_t: Output buffer for the left blinker command.
 */
void set_left_blinker_out(command_out_t);

/**
 * \brief Getter for application.left_blinker_acknowledgement
 * \return acknowledgement_t: Acknowledgement for the left blinker command
 * message.
 */
acknowledgement_t get_left_blinker_acknowledgement();

/**
 * \brief Setter for application.left_blinker_acknowledgement
 * \param acknowledgement_t: Acknowledgement for the left blinker command
 * message.
 */
void set_left_blinker_acknowledgement(acknowledgement_t);

/**
 * \brief Getter for application.right_blinker_in
 * \return command_in_t: Input buffer for the right blinker command.
 */
command_in_t get_right_blinker_in();

/**
 * \brief Setter for application.right_blinker_in
 * \param command_in_t: Input buffer for the right blinker command.
 */
void set_right_blinker_in(command_in_t);

/**
 * \brief Getter for application.right_blinker_out
 * \return command_out_t: Output buffer for the right blinker command.
 */
command_out_t get_right_blinker_out();

/**
 * \brief Setter for application.right_blinker_out
 * \param command_out_t: Output buffer for the right blinker command.
 */
void set_right_blinker_out(command_out_t);

/**
 * \brief Getter for application.right_blinker_acknowledgement
 * \return acknowledgement_t: Acknowledgement for the right blinker command
 * message.
 */
acknowledgement_t get_right_blinker_acknowledgement();

/**
 * \brief Setter for application.right_blinker_acknowledgement
 * \param acknowledgement_t: Acknowledgement for the right blinker command
 * message.
 */
void set_right_blinker_acknowledgement(acknowledgement_t);

/**
 * \brief Getter for application.wipers_in
 * \return command_in_t: Input buffer for the wipers command.
 */
command_in_t get_wipers_in();

/**
 * \brief Setter for application.wipers_in
 * \param command_in_t: Input buffer for the wipers command.
 */
void set_wipers_in(command_in_t);

/**
 * \brief Getter for application.wipers_out
 * \return command_out_t: Output buffer for the wipers command.
 */
command_out_t get_wipers_out();

/**
 * \brief Setter for application.wipers_out
 * \param command_out_t: Output buffer for the wipers command.
 */
void set_wipers_out(command_out_t);

/**
 * \brief Getter for application.washer_fluid_in
 * \return command_in_t: Input buffer for the washer fluid command.
 */
command_in_t get_washer_fluid_in();

/**
 * \brief Setter for application.washer_fluid_in
 * \param command_in_t: Input buffer for the washer fluid command.
 */
void set_washer_fluid_in(command_in_t);

/**
 * \brief Getter for application.washer_fluid_out
 * \return command_out_t: Output buffer for the washer fluid command.
 */
command_out_t get_washer_fluid_out();

/**
 * \brief Setter for application.washer_fluid_out
 * \param command_out_t: Output buffer for the washer fluid command.
 */
void set_washer_fluid_out(command_out_t);

/**
 * \brief Getter for application.comodo_crc_8
 * \return crc_8_t: Input buffer for the COMODO frame’s CRC8 code.
 */
crc_8_t get_comodo_crc_8();

/**
 * \brief Setter for application.comodo_crc_8
 * \param crc_8_t: Input buffer for the COMODO frame’s CRC8 code.
 */
void set_comodo_crc_8(crc_8_t);

/**
 * \brief Getter for application.mux_frame_id
 * \return mux_id_t: Input buffer for the MUX frame ID.
 */
mux_id_t get_mux_frame_id();

/**
 * \brief Setter for application.mux_frame_id
 * \param mux_id_t: Input buffer for the MUX frame ID.
 */
void set_mux_frame_id(mux_id_t);

/**
 * \brief Getter for application.frame_mileage_in
 * \return frame_mileage_t: Input buffer for the vehicle’s mileage.
 */
frame_mileage_t get_frame_mileage_in();

/**
 * \brief Setter for application.frame_mileage_in
 * \param frame_mileage_t: Input buffer for the vehicle’s mileage.
 */
void set_frame_mileage_in(frame_mileage_t);

/**
 * \brief Getter for application.frame_mileage_out
 * \return frame_mileage_t: Output buffer for the vehicle’s mileage.
 */
frame_mileage_t get_frame_mileage_out();

/**
 * \brief Setter for application.frame_mileage_out
 * \param frame_mileage_t: Output buffer for the vehicle’s mileage.
 */
void set_frame_mileage_out(frame_mileage_t);

/**
 * \brief Getter for application.frame_speed_in
 * \return frame_speed_t: Input buffer for the vehicle’s speed.
 */
frame_speed_t get_frame_speed_in();

/**
 * \brief Setter for application.frame_speed_in
 * \param frame_speed_t: Input buffer for the vehicle’s speed.
 */
void set_frame_speed_in(frame_speed_t);

/**
 * \brief Getter for application.frame_speed_out
 * \return frame_speed_t: Output buffer for the vehicle’s speed.
 */
frame_speed_t get_frame_speed_out();

/**
 * \brief Setter for application.frame_speed_out
 * \param frame_speed_t: Output buffer for the vehicle’s speed.
 */
void set_frame_speed_out(frame_speed_t);

/**
 * \brief Getter for application.frame_flags_in
 * \return frame_flags_t: Input buffer for the vehicle’s frame status
 * information.
 */
frame_flags_t get_frame_flags_in();

/**
 * \brief Setter for application.frame_flags_in
 * \param frame_flags_t: Input buffer for the vehicle’s frame status
 * information.
 */
void set_frame_flags_in(frame_flags_t);

/**
 * \brief Getter for application.motor_flags_in
 * \return motor_flags_t: Input buffer for the vehicle’s motor status
 * information.
 */
motor_flags_t get_motor_flags_in();

/**
 * \brief Setter for application.motor_flags_in
 * \param motor_flags_t: Input buffer for the vehicle’s motor status
 * information.
 */
void set_motor_flags_in(motor_flags_t);

/**
 * \brief Getter for application.tank_level_in
 * \return tank_level_t: Input buffer for the vehicle’s tank fuel level.
 */
tank_level_t get_tank_level_in();

/**
 * \brief Setter for application.tank_level_in
 * \param tank_level_t: Input buffer for the vehicle’s tank fuel level.
 */
void set_tank_level_in(tank_level_t);

/**
 * \brief Getter for application.tank_level_out
 * \return tank_level_t: Output buffer for the vehicle’s tank fuel level.
 */
tank_level_t get_tank_level_out();

/**
 * \brief Setter for application.tank_level_out
 * \param tank_level_t: Output buffer for the vehicle’s tank fuel level.
 */
void set_tank_level_out(tank_level_t);

/**
 * \brief Getter for application.motor_speed_in
 * \return motor_speed_t: Input buffer for the vehicle’s motor speed.
 */
motor_speed_t get_motor_speed_in();

/**
 * \brief Setter for application.motor_speed_in
 * \param motor_speed_t: Input buffer for the vehicle’s motor speed.
 */
void set_motor_speed_in(motor_speed_t);

/**
 * \brief Getter for application.motor_speed_out
 * \return motor_speed_t: Output buffer for the vehicle’s motor speed.
 */
motor_speed_t get_motor_speed_out();

/**
 * \brief Setter for application.motor_speed_out
 * \param motor_speed_t: Output buffer for the vehicle’s motor speed.
 */
void set_motor_speed_out(motor_speed_t);

/**
 * \brief Getter for application.battery_flags_in
 * \return battery_flags_t: Input buffer for the vehicle’s battery status
 * information.
 */
battery_flags_t get_battery_flags_in();

/**
 * \brief Setter for application.battery_flags_in
 * \param battery_flags_t: Input buffer for the vehicle’s battery status
 * information.
 */
void set_battery_flags_in(battery_flags_t);

/**
 * \brief Getter for application.indicator_sidelights
 * \return command_out_t: Output buffer for the sidelights indicator.
 */
command_out_t get_indicator_sidelights();

/**
 * \brief Setter for application.indicator_sidelights
 * \param command_out_t: Output buffer for the sidelights indicator.
 */
void set_indicator_sidelights(command_out_t);

/**
 * \brief Getter for application.indicator_headlights
 * \return command_out_t: Output buffer for the headlight indicator.
 */
command_out_t get_indicator_headlights();

/**
 * \brief Setter for application.indicator_headlights
 * \param command_out_t: Output buffer for the headlight indicator.
 */
void set_indicator_headlights(command_out_t);

/**
 * \brief Getter for application.indicator_redlights
 * \return command_out_t: Output buffer for the redlights indicator.
 */
command_out_t get_indicator_redlights();

/**
 * \brief Setter for application.indicator_redlights
 * \param command_out_t: Output buffer for the redlights indicator.
 */
void set_indicator_redlights(command_out_t);

/**
 * \brief Getter for application.indicator_low_fuel
 * \return command_out_t: Output buffer for the low fuel indicator.
 */
command_out_t get_indicator_low_fuel();

/**
 * \brief Setter for application.indicator_low_fuel
 * \param command_out_t: Output buffer for the low fuel indicator.
 */
void set_indicator_low_fuel(command_out_t);

/**
 * \brief Getter for application.indicator_motor_failure
 * \return command_out_t: Output buffer for the motor failure indicator.
 */
command_out_t get_indicator_motor_failure();

/**
 * \brief Setter for application.indicator_motor_failure
 * \param command_out_t: Output buffer for the motor failure indicator.
 */
void set_indicator_motor_failure(command_out_t);

/**
 * \brief Getter for application.indicator_tire_pressure
 * \return command_out_t: Output buffer for the low tire pressure indicator.
 */
command_out_t get_indicator_tire_pressure();

/**
 * \brief Setter for application.indicator_tire_pressure
 * \param command_out_t: Output buffer for the low tire pressure indicator.
 */
void set_indicator_tire_pressure(command_out_t);

/**
 * \brief Getter for application.indicator_brake_pads_failure
 * \return command_out_t: Output buffer for the brake pads failure indicator.
 */
command_out_t get_indicator_brake_pads_failure();

/**
 * \brief Setter for application.indicator_brake_pads_failure
 * \param command_out_t: Output buffer for the brake pads failure indicator.
 */
void set_indicator_brake_pads_failure(command_out_t);

/**
 * \brief Getter for application.indicator_battery_low
 * \return command_out_t: Output buffer for the battery low indicator.
 */
command_out_t get_indicator_battery_low();

/**
 * \brief Setter for application.indicator_battery_low
 * \param command_out_t: Output buffer for the battery low indicator.
 */
void set_indicator_battery_low(command_out_t);

/**
 * \brief Getter for application.indicator_warnings
 * \return command_out_t: Output buffer for the warnings indicator.
 */
command_out_t get_indicator_warnings();

/**
 * \brief Setter for application.indicator_warnings
 * \param command_out_t: Output buffer for the warnings indicator.
 */
void set_indicator_warnings(command_out_t);

/**
 * \brief Getter for application.indicator_battery_failure
 * \return command_out_t: Output buffer for the battery failure indicator.
 */
command_out_t get_indicator_battery_failure();

/**
 * \brief Setter for application.indicator_battery_failure
 * \param command_out_t: Output buffer for the battery failure indicator.
 */
void set_indicator_battery_failure(command_out_t);

/**
 * \brief Getter for application.indicator_cooling_liquid_overheat
 * \return command_out_t: Output buffer for the cooling liquid overheat
 * indicator.
 */
command_out_t get_indicator_cooling_liquid_overheat();

/**
 * \brief Setter for application.indicator_cooling_liquid_overheat
 * \param command_out_t: Output buffer for the cooling liquid overheat
 * indicator.
 */
void set_indicator_cooling_liquid_overheat(command_out_t);

/**
 * \brief Getter for application.indicator_motor_pressure
 * \return command_out_t: Output buffer for the motor pressure indicator.
 */
command_out_t get_indicator_motor_pressure();

/**
 * \brief Setter for application.indicator_motor_pressure
 * \param command_out_t: Output buffer for the motor pressure indicator.
 */
void set_indicator_motor_pressure(command_out_t);

/**
 * \brief Getter for application.indicator_oil_overheat
 * \return command_out_t: Output buffer for the oil overhead indicator.
 */
command_out_t get_indicator_oil_overheat();

/**
 * \brief Setter for application.indicator_oil_overheat
 * \param command_out_t: Output buffer for the oil overhead indicator.
 */
void set_indicator_oil_overheat(command_out_t);

/**
 * \brief Getter for application.indicator_brake_failure
 * \return command_out_t: Output buffer for the brake failure indicator.
 */
command_out_t get_indicator_brake_failure();

/**
 * \brief Setter for application.indicator_brake_failure
 * \param command_out_t: Output buffer for the brake failure indicator.
 */
void set_indicator_brake_failure(command_out_t);

/**
 * \brief Getter for application.fsm_sidelights
 * \return fsm_lights_t: Current state of the FSM for the sidelights.
 */
fsm_lights_t get_fsm_sidelights();

/**
 * \brief Setter for application.fsm_sidelights
 * \param fsm_lights_t: Current state of the FSM for the sidelights.
 */
void set_fsm_sidelights(fsm_lights_t);

/**
 * \brief Getter for application.fsm_sidelights_timer
 * \return fsm_timer_t: Timer for the sidelights FSM.
 */
fsm_timer_t get_fsm_sidelights_timer();

/**
 * \brief Setter for application.fsm_sidelights_timer
 * \param fsm_timer_t: Timer for the sidelights FSM.
 */
void set_fsm_sidelights_timer(fsm_timer_t);

/**
 * \brief Getter for application.fsm_headlights
 * \return fsm_lights_t: Current state of the FSM for the headlights.
 */
fsm_lights_t get_fsm_headlights();

/**
 * \brief Setter for application.fsm_headlights
 * \param fsm_lights_t: Current state of the FSM for the headlights.
 */
void set_fsm_headlights(fsm_lights_t);

/**
 * \brief Getter for application.fsm_headlights_timer
 * \return fsm_timer_t: Timer for the headlights FSM.
 */
fsm_timer_t get_fsm_headlights_timer();

/**
 * \brief Setter for application.fsm_headlights_timer
 * \param fsm_timer_t: Timer for the headlights FSM.
 */
void set_fsm_headlights_timer(fsm_timer_t);

/**
 * \brief Getter for application.fsm_redlights
 * \return fsm_lights_t: Current state of the FSM for the redlights.
 */
fsm_lights_t get_fsm_redlights();

/**
 * \brief Setter for application.fsm_redlights
 * \param fsm_lights_t: Current state of the FSM for the redlights.
 */
void set_fsm_redlights(fsm_lights_t);

/**
 * \brief Getter for application.fsm_redlights_timer
 * \return fsm_timer_t: Timer for the redlights FSM.
 */
fsm_timer_t get_fsm_redlights_timer();

/**
 * \brief Setter for application.fsm_redlights_timer
 * \param fsm_timer_t: Timer for the redlights FSM.
 */
void set_fsm_redlights_timer(fsm_timer_t);

/**
 * \brief Getter for application.fsm_left_blinker
 * \return fsm_blinkers_t: Current state of the FSM for the left blinker.
 */
fsm_blinkers_t get_fsm_left_blinker();

/**
 * \brief Setter for application.fsm_left_blinker
 * \param fsm_blinkers_t: Current state of the FSM for the left blinker.
 */
void set_fsm_left_blinker(fsm_blinkers_t);

/**
 * \brief Getter for application.fsm_left_blinker_timer
 * \return fsm_timer_t: Timer for the left blinker FSM.
 */
fsm_timer_t get_fsm_left_blinker_timer();

/**
 * \brief Setter for application.fsm_left_blinker_timer
 * \param fsm_timer_t: Timer for the left blinker FSM.
 */
void set_fsm_left_blinker_timer(fsm_timer_t);

/**
 * \brief Getter for application.fsm_right_blinker
 * \return fsm_blinkers_t: Current state of the FSM for the right blinker.
 */
fsm_blinkers_t get_fsm_right_blinker();

/**
 * \brief Setter for application.fsm_right_blinker
 * \param fsm_blinkers_t: Current state of the FSM for the right blinker.
 */
void set_fsm_right_blinker(fsm_blinkers_t);

/**
 * \brief Getter for application.fsm_right_blinker_timer
 * \return fsm_timer_t: Timer for the right blinker FSM.
 */
fsm_timer_t get_fsm_right_blinker_timer();

/**
 * \brief Setter for application.fsm_right_blinker_timer
 * \param fsm_timer_t: Timer for the right blinker FSM.
 */
void set_fsm_right_blinker_timer(fsm_timer_t);

/**
 * \brief Getter for application.fsm_warnings
 * \return fsm_blinkers_t: Current state of the FSM for the warnings.
 */
fsm_blinkers_t get_fsm_warnings();

/**
 * \brief Setter for application.fsm_warnings
 * \param fsm_blinkers_t: Current state of the FSM for the warnings.
 */
void set_fsm_warnings(fsm_blinkers_t);

/**
 * \brief Getter for application.fsm_warnings_timer
 * \return fsm_timer_t: Timer for the warnings FSM.
 */
fsm_timer_t get_fsm_warnings_timer();

/**
 * \brief Setter for application.fsm_warnings_timer
 * \param fsm_timer_t: Timer for the warnings FSM.
 */
void set_fsm_warnings_timer(fsm_timer_t);

/**
 * \brief Getter for application.fsm_wipers
 * \return fsm_wipers_t: Current state of the FSM for the wipers.
 */
fsm_wipers_t get_fsm_wipers();

/**
 * \brief Setter for application.fsm_wipers
 * \param fsm_wipers_t: Current state of the FSM for the wipers.
 */
void set_fsm_wipers(fsm_wipers_t);

/**
 * \brief Getter for application.fsm_wipers_timer
 * \return fsm_timer_t: Timer for the wipers FSM.
 */
fsm_timer_t get_fsm_wipers_timer();

/**
 * \brief Setter for application.fsm_wipers_timer
 * \param fsm_timer_t: Timer for the wipers FSM.
 */
void set_fsm_wipers_timer(fsm_timer_t);

/**
 * \brief Initialization function for application variables
 */
void init();
#endif